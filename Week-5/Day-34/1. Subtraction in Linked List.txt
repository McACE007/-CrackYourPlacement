class Solution { 
public:
    void add_at_end(Node *&head, int x) {
        static Node *rear = head;
        if (head == NULL) {
            head = new Node(x);
            rear = head;
            return;
        }
        rear->next = new Node(x);
        rear = rear->next;
    }
    
    int reverse(Node *&head) {
        Node *curr = head;
        Node *next = NULL;
        Node *prev = NULL;
        int length = 0;
        
        while (curr != NULL) {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
            length++;
        }
        head = prev;
        return length;
    }
    
    Node* subLinkedList(Node* head1, Node* head2) {
        while (head1 != NULL && head1->data == 0) head1 = head1->next;
        while (head2 != NULL && head2->data == 0) head2 = head2->next;
        
        if (head1 == NULL && head2 == NULL) return new Node(0);
        
        int len1 = reverse(head1);
        int len2 = reverse(head2);
        
        if (len1 < len2 || (len1 == len2 && compareLists(head1, head2) < 0)) {
            swap(head1, head2);
        }
        
        Node *result = NULL;
        Node *p = head1, *q = head2;
        int borrow = 0;
        
        while (p != NULL) {
            int sub = p->data - (q != NULL ? q->data : 0) - borrow;
            if (sub < 0) {
                sub += 10;
                borrow = 1;
            } else {
                borrow = 0;
            }
            add_at_end(result, sub);
            p = p->next;
            if (q != NULL) q = q->next;
        }
        
        reverse(result);
        
        while (result != NULL && result->data == 0) result = result->next;
        
        if (result == NULL) return new Node(0);
        
        return result;
    }
    
private:
    int compareLists(Node* head1, Node* head2) {
        while (head1 != NULL && head2 != NULL) {
            if (head1->data != head2->data) return head1->data - head2->data;
            head1 = head1->next;
            head2 = head2->next;
        }
        return 0;
    }
};

