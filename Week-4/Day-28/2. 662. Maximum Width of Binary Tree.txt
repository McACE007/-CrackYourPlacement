class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if (!root) return 0;

        int maxWidth = 1;
        queue<pair<TreeNode*, long long>> q;
        q.push({root, 0});

        while (!q.empty()) {
            int size = q.size();
            long long minIndex = q.front().second;
            int leftMost, rightMost;

            for (int i = 0; i < size; i++) {
                auto [node, index] = q.front();
                q.pop();
                
                index -= minIndex;

                if (i == 0) leftMost = index;
                if (i == size - 1) rightMost = index;

                if (node->left) q.push({node->left, 2 * index + 1});
                if (node->right) q.push({node->right, 2 * index + 2});
            }

            maxWidth = max(maxWidth, rightMost - leftMost + 1);
        }

        return maxWidth;
    }
};

