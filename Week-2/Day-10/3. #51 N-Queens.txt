class Solution {
public:
    bool isAttacking(int row, int col, vector<string>& board, int n) {
      for(int i = row, j = col;i >= 0 && j >= 0; i--, j--)        
            if (board[i][j] == 'Q') return true;

      for(int j = col; j >= 0; j--) 
        if (board[row][j] == 'Q')
          return true;

      for(int i = row, j = col; row < n && col >= 0; row++, col--)
        if (board[row][col] == 'Q') return true;
      
      return false;
    }

    void helper(int col, int n, vector<string>& board, vector<vector<string>>& res){
        if(col == n){
            res.push_back(board);
            return;
        }
        
        for(int row = 0; row < n; row++){
            if(!isAttacking(row, col, board, n)){
                board[row][col] = 'Q';
                helper(col+1, n, board, res);
                board[row][col] = '.';
            }
        }

    }

    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> res;
        vector<string> board(n, string(n, '.'));
        helper(0, n, board, res);
        return res;
    }
};
