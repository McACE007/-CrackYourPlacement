class Solution {
public:
    int xLen, yLen, totalZeros, res = 0;
    
    void dfs(vector<vector<int>>& grid, int x, int y, int zerosLeft) {
        if (x < 0 || y < 0 || x >= xLen || y >= yLen || grid[y][x] == -1) return;
        
        if (grid[y][x] == 2) {
            if (zerosLeft == -1) res++;  
            return;
        }
        
        grid[y][x] = -1;
        
        dfs(grid, x + 1, y, zerosLeft - 1);
        dfs(grid, x - 1, y, zerosLeft - 1);
        dfs(grid, x, y + 1, zerosLeft - 1);
        dfs(grid, x, y - 1, zerosLeft - 1);
        
        grid[y][x] = 0;
    }
    
    int uniquePathsIII(vector<vector<int>>& grid) {
        yLen = grid.size();
        xLen = grid[0].size();
        totalZeros = 0;
        int startX = 0, startY = 0;
        
        for (int y = 0; y < yLen; y++) {
            for (int x = 0; x < xLen; x++) {
                if (grid[y][x] == 1) {
                    startX = x;
                    startY = y;
                } else if (grid[y][x] == 0) {
                    totalZeros++;
                }
            }
        }
        
        dfs(grid, startX, startY, totalZeros);
        return res;
    }
};

