class Solution {
public:
    bool isCycle(int V, vector<int> adj[]) {
        vector<bool> visited(V, false);
        vector<int> parent(V, -1);
        
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                if (bfs(i, visited, parent, adj)) return true;
            }
        }
        return false;
    }

private:
    bool bfs(int start, vector<bool>& visited, vector<int>& parent, vector<int> adj[]) {
        queue<int> q;
        q.push(start);
        visited[start] = true;

        while (!q.empty()) {
            int node = q.front();
            q.pop();

            for (int neighbor : adj[node]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    parent[neighbor] = node;
                    q.push(neighbor);
                } else if (parent[node] != neighbor) {
                    return true;
                }
            }
        }
        return false;
    }
};