class Solution {
public:
    int minStepToReachTarget(vector<int>& KnightPos, vector<int>& TargetPos, int N) {
        vector<vector<bool>> visited(N + 1, vector<bool>(N + 1, false));
        queue<pair<int, pair<int, int>>> q;
        q.push({0, {KnightPos[0], KnightPos[1]}});
        visited[KnightPos[0]][KnightPos[1]] = true;

        int dirX[] = {1, 2, 2, 1, -1, -2, -2, -1};
        int dirY[] = {2, 1, -1, -2, -2, -1, 1, 2};

        while (!q.empty()) {
            int steps = q.front().first;
            int x = q.front().second.first;
            int y = q.front().second.second;
            q.pop();

            if (x == TargetPos[0] && y == TargetPos[1]) return steps;

            for (int i = 0; i < 8; i++) {
                int newX = x + dirX[i], newY = y + dirY[i];
                if (newX >= 1 && newX <= N && newY >= 1 && newY <= N && !visited[newX][newY]) {
                    visited[newX][newY] = true;
                    q.push({steps + 1, {newX, newY}});
                }
            }
        }
        return -1;
    }
};