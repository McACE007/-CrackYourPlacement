class Solution {
public:
    void markIsland(vector<vector<int>>& grid, vector<vector<int>>& visit, int row, int col, int n, int m, queue<pair<int,pair<int,int>>>& q) {
        visit[row][col] = 1;
        q.push({0, {row, col}});
        int rownum[] = {-1, 0, 1, 0};
        int colnum[] = {0, 1, 0, -1};
        
        for(int i = 0; i < 4; i++) {
            int nrow = row + rownum[i];
            int ncol = col + colnum[i];
            if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && grid[nrow][ncol] == 1 && visit[nrow][ncol] == 0) {
                markIsland(grid, visit, nrow, ncol, n, m, q);
            }
        }
    }
    
    int shortestBridge(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        queue<pair<int,pair<int,int>>> q;
        vector<vector<int>> visit(n, vector<int>(m, 0));
        
        bool islandMarked = false;
        for(int i = 0; i < n && !islandMarked; i++) {
            for(int j = 0; j < m && !islandMarked; j++) {
                if(grid[i][j] == 1) {
                    markIsland(grid, visit, i, j, n, m, q);
                    islandMarked = true;
                }
            }
        }
        
        while(!q.empty()) {
            int dist = q.front().first;
            int row = q.front().second.first;
            int col = q.front().second.second;
            q.pop();
            
            int rownum[] = {-1, 0, 1, 0};
            int colnum[] = {0, 1, 0, -1};
            for(int i = 0; i < 4; i++) {
                int nrow = row + rownum[i];
                int ncol = col + colnum[i];
                
                if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && visit[nrow][ncol] == 0) {
                    if(grid[nrow][ncol] == 1) {
                        return dist;
                    }
                    
                    visit[nrow][ncol] = 1;
                    q.push({dist + 1, {nrow, ncol}});
                }
            }
        }
        return -1;
    }
};
