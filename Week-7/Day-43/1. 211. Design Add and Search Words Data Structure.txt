class TrieNode {
public:
    bool isWord;
    TrieNode* children[26];
    TrieNode() {
        isWord = false;
        memset(children, 0, sizeof(children));
    }
};

class WordDictionary {
public:
    WordDictionary() {
        root = new TrieNode();
    }
    
    void addWord(string word) {
        TrieNode* node = root;
        for (char c : word) {
            if (!node->children[c - 'a']) {
                node->children[c - 'a'] = new TrieNode();
            }
            node = node->children[c - 'a'];
        }
        node->isWord = true;
    }
    
    bool search(string word) {
        return searchInTrie(word.c_str(), root);
    }
    
private:
    TrieNode* root;
    
    bool searchInTrie(const char* word, TrieNode* node) {
        for (int i = 0; word[i]; i++) {
            if (word[i] != '.') {
                node = node->children[word[i] - 'a'];
                if (!node) return false;
            } else {
                for (int j = 0; j < 26; j++) {
                    if (node->children[j] && searchInTrie(word + i + 1, node->children[j])) {
                        return true;
                    }
                }
                return false;
            }
        }
        return node && node->isWord;
    }
};
