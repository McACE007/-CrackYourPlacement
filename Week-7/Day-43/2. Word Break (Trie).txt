class Node {
public:
    Node* children[26];
    bool isTerminal;
    
    Node() {
        fill(begin(children), end(children), nullptr);
        isTerminal = false;
    }
};

class Trie {
private:
    Node* root;

public:
    Trie() {
        root = new Node();
    }
    
    void insert(const string &str) {
        Node* curr = root;
        for (char ch : str) {
            int index = ch - 'a';
            if (curr->children[index] == nullptr) {
                curr->children[index] = new Node();
            }
            curr = curr->children[index];
        }
        curr->isTerminal = true;
    }
    
    bool search(const string &str, int start) {
        if (start >= str.size()) return true;
        Node* curr = root;
        for (int i = start; i < str.size(); ++i) {
            int index = str[i] - 'a';
            if (curr->children[index] == nullptr) return false;
            curr = curr->children[index];
            if (curr->isTerminal && search(str, i + 1)) return true;
        }
        return false;
    }
};

class Solution {
public:
    bool wordBreak(string A, vector<string> &B) {
        Trie trie;
        for (const string &word : B) {
            trie.insert(word);
        }
        return trie.search(A, 0);
    }
};

