class LRUCache {
public:
    class Node {
    public:
        int key;
        int value;
        Node* prev;
        Node* next;

        Node(int key, int value) {
            this->key = key;
            this->value = value;
            prev = next = nullptr;
        }
    };

    LRUCache(int capacity) {
        cap = capacity;
        head = new Node(-1, -1);
        tail = new Node(-1, -1);
        head->next = tail;
        tail->prev = head;
    }

    int get(int key) {
        if (m.find(key) != m.end()) {
            Node* node = m[key];
            int result = node->value;
            removeNode(node);
            addNode(node);
            return result;
        }
        return -1;
    }

    void put(int key, int value) {
        if (m.find(key) != m.end()) {
            Node* node = m[key];
            removeNode(node);
            m.erase(key);
        }
        if (m.size() == cap) {
            m.erase(tail->prev->key);
            removeNode(tail->prev);
        }
        Node* node = new Node(key, value);
        addNode(node);
        m[key] = head->next;
    }

private:
    void addNode(Node* node) {
        Node* temp = head->next;
        node->next = temp;
        node->prev = head;
        head->next = node;
        temp->prev = node;
    }

    void removeNode(Node* node) {
        Node* prev = node->prev;
        Node* next = node->next;
        prev->next = next;
        next->prev = prev;
    }

    unordered_map<int, Node*> m;
    Node* head;
    Node* tail;
    int cap;
};

